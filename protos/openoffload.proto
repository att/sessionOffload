// Copyright (C) 2020 AT&T Intellectual Property. All rights reserved.
// Copyright (C) 2020 Palo Alto Networks Intellectual Property. All rights reserved.
// Copyright (C) 2022 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

// will move to v1 at release 
// increment beta1 to beta2 , etc for changes during development

package openoffload.v1;

option go_package = ".;openoffload_v1beta1";

import "google/protobuf/timestamp.proto";

enum IpVersion {
	_IPV4 = 0;
	_IPV6 = 1;
}

enum ProtocolId {
	_HOPOPT = 0;
	_TCP    = 6;
	_UDP    = 17;
  reserved 1 to 5, 7 to 16, 18 to 255 ;
}

enum SessionState {
	_ESTABLISHED   = 0;
	_CLOSING_1     = 1;
	_CLOSING_2     = 2;
	_CLOSED        = 3;
	_UNKNOWN_STATE = 4;
}
 
enum SessionCloseCode {
	_NOT_CLOSED         = 0;
	_FINACK             = 1;
	_RST                = 2;
	_TIMEOUT            = 3;
	_UNKNOWN_CLOSE_CODE = 4;
}
//
// Errors for adding a session
// If all sessions are successful inserted return _ACCEPTED
//
// If check of session capacity in offload device is insufficient to add all sessions 
// do not insert any sessions and return  _REJECTED_SESSION_TABLE_FULL. It is the 
// responsibility of the client to re-try
//
// If the server is unavailable for some other reason then return _REJECTED_SESSION_TABLE_UNAVAILABLE.
// It is the  responsibility of the client to re-try
//
// All other errors will return _REJECTED with a buit mask of the failed sessions and it is the responsibility
// of the client to address the issues
//
// AddSessionStatus Codes Description
//
// _SESSION_ACCEPTED: Session is accepted by the server and the client performs normal operation
// _SESSION_REJECTED: Session is rejected by the server as the message 
//    is invalid, the client needs to correct the error.
// _SESSION_TABLE_FULL: Session is rejected by the server as its session table is full, 
//    the client needs to backoff until more space is available
// _SESSION_TABLE_UNAVAILABLE: Session is rejected by the server due to an internal error 
//    in the server, the client needs to back off until error is corrected.
// _SESSION_ALREADY_EXISTS: Session is rejected by the the server as it already exists 
//    in the server session table, the client will take corrective action to ensure state is consistent.
//
enum AddSessionStatus {
	_SESSION_ACCEPTED          = 0;
	_SESSION_REJECTED          = 1;
	_SESSION_TABLE_FULL        = 2;
	_SESSION_TABLE_UNAVAILABLE = 3;
	_SESSION_ALREADY_EXISTS    = 4;
}
//
// RequestStatus Codes Description
//
// _ACCEPTED: Normal operation
// _REJECTED: Unknown error in the format of the REQUEST message
// _REJECTED_SESSION_NONEXISTENT: In getSession or deleteSession the server does not have the session
//    in its session table. The client needs to reconcile the system state.
// _REJECTED_SESSION_TABLE_FULL: This should never happen as getClosedSessions, getSession, deleteSession never add sessions.
// _REJECTED_SESSION_ALREADY_EXISTS: This should never happen as getClosedSessions, getSession, deleteSession never add sessions.
// _NO_CLOSED_SESSIONS: When getClosedSessions returns with no closed sessions it will return 0 sessions. There should be no
//    message attached so not sure if this is valid.
// _REJECTED_INTERNAL_ERROR: The server has an internal error and cannot serivce the request.
//    The client must log the error and optionally retry or skip the request.
//
enum RequestStatus {
	_ACCEPTED                        = 0;
	_REJECTED                        = 1;
	_REJECTED_SESSION_NONEXISTENT    = 2;
	_REJECTED_SESSION_TABLE_FULL     = 3;
	_REJECTED_SESSION_ALREADY_EXISTS = 4;
	_NO_CLOSED_SESSIONS              = 5;
	_REJECTED_INTERNAL_ERROR         = 6;
}

enum ActionType {
	_DROP    = 0;
	_FORWARD = 1;
	_MIRROR  = 2;
	_SNOOP   = 3;
}

//
// The session table was combined with the statistices service
// in v1alpha4 to simplfy the code.
//
service SessionTable {
	//
	// Adds a session
	// This was changed in v1alpha4 to be a streaming API, for performance
	// reasons.
	rpc AddSession(stream SessionRequest) returns (AddSessionResponse) {}
	//
	// Obtains the session
	rpc GetSession(SessionId) returns (SessionResponse) {}
	//
	// Delete a session
	rpc DeleteSession(SessionId) returns (SessionResponse) {}
	//
	// Stream back a specific session or all current sessions
	// To stream a single session, pass SessionId as zero
	rpc GetAllSessions(SessionRequestArgs) returns (SessionResponses) {}
	//
	// statistics as a outgoing session from the WB to Applications ?
	// grpc seems to need a request input streamId is a placeholder
	rpc GetClosedSessions(SessionRequestArgs) returns (stream SessionResponse) {}
}

// Uuid for Session IDs
message Uuid {
	string value = 1;
}


// should the Application assign the sessionID on AddSession and avoid conflicts
// or have the applications have a mechanism to avoid duplicate sessionIDs across 
// applications since there will be many applications instances to 1 switch
message SessionId {
	uint64 session_id = 1;
}

// MIRROR and SNOOP require an actionNextHop
// DROP and FORWARD do not have an actionNextHop
// The IPV4 nextHop definition maps to the V4 struct returned by inet_pton which is a uint32_t.
// The IPV6 nextHop definition maps to the V6 struct returned by inet_ptoN which is a uint8_t s6_addr[16]
message ActionParameters {
	ActionType action_type   = 1;
	uint32 action_next_hop   = 2;
	bytes action_next_hop_v6 = 3;
}

// SessionId is generated by client and passed in via gRPC call
// The IPV4 definition maps to the V4 struct returned by inet_pton which is a uint32_t.
// The IPV6 definition maps to the V6 struct returned by inet_ptoN which is a uint8_t s6_addr[16]
message SessionRequest {
	uint64 session_id        = 1;
	int32 in_lif             = 2;
	int32 out_lif            = 3;
	IpVersion ip_version     = 4;
	uint32 source_ip         = 5;
	bytes source_ipv6        = 6;
	uint32 source_port       = 7;
	uint32 destination_ip    = 8;
	bytes destination_ipv6   = 9;
	uint32 destination_port  = 10;
	ProtocolId protocol_id   = 11;
	ActionParameters action  = 12;
	uint32 cache_timeout     = 13;
}

message SessionResponseError {
	uint64 session_id  = 1;
	int32 error_status = 2;
}

message SessionResponses {
	repeated SessionResponse session_info = 1;
	uint64 next_key                       = 2;
}

//
// In v1apha4 the errorstatus was added to act as a bitmask
// of errors for each of the sesssions sent in a stream (max 64).
//
message AddSessionResponse {
	AddSessionStatus request_status              = 1;
	uint64 error_status                          = 2;
	google.protobuf.Timestamp start_time         = 3;
	repeated SessionResponseError response_error = 4;
}

message SessionResponse {
	uint64 session_id                     = 1;
	uint64 in_packets                     = 2;
	uint64 out_packets                    = 3;
	uint64 in_bytes                       = 4;
	uint64 out_bytes                      = 5;
	SessionState session_state            = 6;
	SessionCloseCode session_close_code   = 7;
	RequestStatus request_status          = 8;
	google.protobuf.Timestamp start_time  = 9;
	google.protobuf.Timestamp end_time    = 10;
}

message SessionRequestArgs{
	//  pageSize = 0 will turn off paging
	//  does paging make sense for a stream ?
	//  the client should read/process each event on the stream anyway.
	uint32  page_size     = 1;
	uint32  page          = 2;
	uint64  start_session = 3;
	//  what other arguments make sense for retrieving or filtering streams
}
